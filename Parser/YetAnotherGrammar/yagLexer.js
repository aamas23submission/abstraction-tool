// Generated from yag.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,69,434,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,
56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,1,0,1,0,
1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,
1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,
1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,
10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,
16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,
1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,
20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,
1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,
32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,38,1,38,
1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,43,1,
43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,
1,50,1,51,1,51,1,51,1,52,1,52,1,53,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,
55,1,56,1,56,1,56,1,57,1,57,1,57,1,58,1,58,1,58,1,59,1,59,1,59,1,60,1,60,
1,60,1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,63,1,63,1,63,5,63,368,8,63,
10,63,12,63,371,9,63,1,63,1,63,1,64,1,64,5,64,377,8,64,10,64,12,64,380,9,
64,1,64,3,64,383,8,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,
394,8,65,1,66,1,66,5,66,398,8,66,10,66,12,66,401,9,66,1,67,4,67,404,8,67,
11,67,12,67,405,1,67,1,67,1,68,1,68,1,68,1,68,5,68,414,8,68,10,68,12,68,
417,9,68,1,68,1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,69,5,69,428,8,69,10,69,
12,69,431,9,69,1,69,1,69,1,415,0,70,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,
67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,
91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,
113,57,115,58,117,59,119,60,121,61,123,62,125,63,127,0,129,64,131,65,133,
66,135,67,137,68,139,69,1,0,6,1,0,49,57,1,0,48,57,3,0,65,90,95,95,97,122,
4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,2,0,10,10,13,13,440,0,
1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,
0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,
69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,
0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,
1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,
0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,
0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,
123,1,0,0,0,0,125,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,
1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,1,141,1,0,0,0,3,143,1,0,0,0,5,146,1,
0,0,0,7,149,1,0,0,0,9,153,1,0,0,0,11,156,1,0,0,0,13,162,1,0,0,0,15,168,1,
0,0,0,17,177,1,0,0,0,19,184,1,0,0,0,21,189,1,0,0,0,23,197,1,0,0,0,25,203,
1,0,0,0,27,206,1,0,0,0,29,211,1,0,0,0,31,218,1,0,0,0,33,222,1,0,0,0,35,227,
1,0,0,0,37,232,1,0,0,0,39,237,1,0,0,0,41,247,1,0,0,0,43,254,1,0,0,0,45,262,
1,0,0,0,47,264,1,0,0,0,49,266,1,0,0,0,51,268,1,0,0,0,53,270,1,0,0,0,55,272,
1,0,0,0,57,274,1,0,0,0,59,276,1,0,0,0,61,278,1,0,0,0,63,280,1,0,0,0,65,282,
1,0,0,0,67,284,1,0,0,0,69,286,1,0,0,0,71,288,1,0,0,0,73,290,1,0,0,0,75,292,
1,0,0,0,77,295,1,0,0,0,79,298,1,0,0,0,81,301,1,0,0,0,83,304,1,0,0,0,85,307,
1,0,0,0,87,310,1,0,0,0,89,312,1,0,0,0,91,314,1,0,0,0,93,316,1,0,0,0,95,318,
1,0,0,0,97,320,1,0,0,0,99,322,1,0,0,0,101,324,1,0,0,0,103,327,1,0,0,0,105,
330,1,0,0,0,107,332,1,0,0,0,109,335,1,0,0,0,111,338,1,0,0,0,113,341,1,0,
0,0,115,344,1,0,0,0,117,347,1,0,0,0,119,350,1,0,0,0,121,353,1,0,0,0,123,
356,1,0,0,0,125,360,1,0,0,0,127,364,1,0,0,0,129,382,1,0,0,0,131,393,1,0,
0,0,133,395,1,0,0,0,135,403,1,0,0,0,137,409,1,0,0,0,139,423,1,0,0,0,141,
142,5,126,0,0,142,2,1,0,0,0,143,144,5,60,0,0,144,145,5,60,0,0,145,4,1,0,
0,0,146,147,5,62,0,0,147,148,5,62,0,0,148,6,1,0,0,0,149,150,5,102,0,0,150,
151,5,111,0,0,151,152,5,114,0,0,152,8,1,0,0,0,153,154,5,100,0,0,154,155,
5,111,0,0,155,10,1,0,0,0,156,157,5,119,0,0,157,158,5,104,0,0,158,159,5,105,
0,0,159,160,5,108,0,0,160,161,5,101,0,0,161,12,1,0,0,0,162,163,5,98,0,0,
163,164,5,114,0,0,164,165,5,101,0,0,165,166,5,97,0,0,166,167,5,107,0,0,167,
14,1,0,0,0,168,169,5,99,0,0,169,170,5,111,0,0,170,171,5,110,0,0,171,172,
5,116,0,0,172,173,5,105,0,0,173,174,5,110,0,0,174,175,5,117,0,0,175,176,
5,101,0,0,176,16,1,0,0,0,177,178,5,115,0,0,178,179,5,119,0,0,179,180,5,105,
0,0,180,181,5,116,0,0,181,182,5,99,0,0,182,183,5,104,0,0,183,18,1,0,0,0,
184,185,5,99,0,0,185,186,5,97,0,0,186,187,5,115,0,0,187,188,5,101,0,0,188,
20,1,0,0,0,189,190,5,100,0,0,190,191,5,101,0,0,191,192,5,102,0,0,192,193,
5,97,0,0,193,194,5,117,0,0,194,195,5,108,0,0,195,196,5,116,0,0,196,22,1,
0,0,0,197,198,5,99,0,0,198,199,5,111,0,0,199,200,5,110,0,0,200,201,5,115,
0,0,201,202,5,116,0,0,202,24,1,0,0,0,203,204,5,105,0,0,204,205,5,102,0,0,
205,26,1,0,0,0,206,207,5,101,0,0,207,208,5,108,0,0,208,209,5,115,0,0,209,
210,5,101,0,0,210,28,1,0,0,0,211,212,5,114,0,0,212,213,5,101,0,0,213,214,
5,116,0,0,214,215,5,117,0,0,215,216,5,114,0,0,216,217,5,110,0,0,217,30,1,
0,0,0,218,219,5,105,0,0,219,220,5,110,0,0,220,221,5,116,0,0,221,32,1,0,0,
0,222,223,5,98,0,0,223,224,5,111,0,0,224,225,5,111,0,0,225,226,5,108,0,0,
226,34,1,0,0,0,227,228,5,118,0,0,228,229,5,111,0,0,229,230,5,105,0,0,230,
231,5,100,0,0,231,36,1,0,0,0,232,233,5,99,0,0,233,234,5,104,0,0,234,235,
5,97,0,0,235,236,5,110,0,0,236,38,1,0,0,0,237,238,5,98,0,0,238,239,5,114,
0,0,239,240,5,111,0,0,240,241,5,97,0,0,241,242,5,100,0,0,242,243,5,99,0,
0,243,244,5,97,0,0,244,245,5,115,0,0,245,246,5,116,0,0,246,40,1,0,0,0,247,
248,5,115,0,0,248,249,5,116,0,0,249,250,5,114,0,0,250,251,5,117,0,0,251,
252,5,99,0,0,252,253,5,116,0,0,253,42,1,0,0,0,254,255,5,116,0,0,255,256,
5,121,0,0,256,257,5,112,0,0,257,258,5,101,0,0,258,259,5,100,0,0,259,260,
5,101,0,0,260,261,5,102,0,0,261,44,1,0,0,0,262,263,5,40,0,0,263,46,1,0,0,
0,264,265,5,41,0,0,265,48,1,0,0,0,266,267,5,123,0,0,267,50,1,0,0,0,268,269,
5,125,0,0,269,52,1,0,0,0,270,271,5,91,0,0,271,54,1,0,0,0,272,273,5,93,0,
0,273,56,1,0,0,0,274,275,5,59,0,0,275,58,1,0,0,0,276,277,5,44,0,0,277,60,
1,0,0,0,278,279,5,46,0,0,279,62,1,0,0,0,280,281,5,33,0,0,281,64,1,0,0,0,
282,283,5,45,0,0,283,66,1,0,0,0,284,285,5,62,0,0,285,68,1,0,0,0,286,287,
5,60,0,0,287,70,1,0,0,0,288,289,5,63,0,0,289,72,1,0,0,0,290,291,5,58,0,0,
291,74,1,0,0,0,292,293,5,61,0,0,293,294,5,61,0,0,294,76,1,0,0,0,295,296,
5,60,0,0,296,297,5,61,0,0,297,78,1,0,0,0,298,299,5,62,0,0,299,300,5,61,0,
0,300,80,1,0,0,0,301,302,5,33,0,0,302,303,5,61,0,0,303,82,1,0,0,0,304,305,
5,43,0,0,305,306,5,43,0,0,306,84,1,0,0,0,307,308,5,45,0,0,308,309,5,45,0,
0,309,86,1,0,0,0,310,311,5,43,0,0,311,88,1,0,0,0,312,313,5,42,0,0,313,90,
1,0,0,0,314,315,5,47,0,0,315,92,1,0,0,0,316,317,5,38,0,0,317,94,1,0,0,0,
318,319,5,124,0,0,319,96,1,0,0,0,320,321,5,94,0,0,321,98,1,0,0,0,322,323,
5,37,0,0,323,100,1,0,0,0,324,325,5,38,0,0,325,326,5,38,0,0,326,102,1,0,0,
0,327,328,5,124,0,0,328,329,5,124,0,0,329,104,1,0,0,0,330,331,5,61,0,0,331,
106,1,0,0,0,332,333,5,43,0,0,333,334,5,61,0,0,334,108,1,0,0,0,335,336,5,
45,0,0,336,337,5,61,0,0,337,110,1,0,0,0,338,339,5,42,0,0,339,340,5,61,0,
0,340,112,1,0,0,0,341,342,5,47,0,0,342,343,5,61,0,0,343,114,1,0,0,0,344,
345,5,38,0,0,345,346,5,61,0,0,346,116,1,0,0,0,347,348,5,124,0,0,348,349,
5,61,0,0,349,118,1,0,0,0,350,351,5,94,0,0,351,352,5,61,0,0,352,120,1,0,0,
0,353,354,5,37,0,0,354,355,5,61,0,0,355,122,1,0,0,0,356,357,5,60,0,0,357,
358,5,60,0,0,358,359,5,61,0,0,359,124,1,0,0,0,360,361,5,62,0,0,361,362,5,
62,0,0,362,363,5,61,0,0,363,126,1,0,0,0,364,365,5,91,0,0,365,369,7,0,0,0,
366,368,7,1,0,0,367,366,1,0,0,0,368,371,1,0,0,0,369,367,1,0,0,0,369,370,
1,0,0,0,370,372,1,0,0,0,371,369,1,0,0,0,372,373,5,93,0,0,373,128,1,0,0,0,
374,378,7,0,0,0,375,377,7,1,0,0,376,375,1,0,0,0,377,380,1,0,0,0,378,376,
1,0,0,0,378,379,1,0,0,0,379,383,1,0,0,0,380,378,1,0,0,0,381,383,5,48,0,0,
382,374,1,0,0,0,382,381,1,0,0,0,383,130,1,0,0,0,384,385,5,116,0,0,385,386,
5,114,0,0,386,387,5,117,0,0,387,394,5,101,0,0,388,389,5,102,0,0,389,390,
5,97,0,0,390,391,5,108,0,0,391,392,5,115,0,0,392,394,5,101,0,0,393,384,1,
0,0,0,393,388,1,0,0,0,394,132,1,0,0,0,395,399,7,2,0,0,396,398,7,3,0,0,397,
396,1,0,0,0,398,401,1,0,0,0,399,397,1,0,0,0,399,400,1,0,0,0,400,134,1,0,
0,0,401,399,1,0,0,0,402,404,7,4,0,0,403,402,1,0,0,0,404,405,1,0,0,0,405,
403,1,0,0,0,405,406,1,0,0,0,406,407,1,0,0,0,407,408,6,67,0,0,408,136,1,0,
0,0,409,410,5,47,0,0,410,411,5,42,0,0,411,415,1,0,0,0,412,414,9,0,0,0,413,
412,1,0,0,0,414,417,1,0,0,0,415,416,1,0,0,0,415,413,1,0,0,0,416,418,1,0,
0,0,417,415,1,0,0,0,418,419,5,42,0,0,419,420,5,47,0,0,420,421,1,0,0,0,421,
422,6,68,0,0,422,138,1,0,0,0,423,424,5,47,0,0,424,425,5,47,0,0,425,429,1,
0,0,0,426,428,8,5,0,0,427,426,1,0,0,0,428,431,1,0,0,0,429,427,1,0,0,0,429,
430,1,0,0,0,430,432,1,0,0,0,431,429,1,0,0,0,432,433,6,69,0,0,433,140,1,0,
0,0,9,0,369,378,382,393,399,405,415,429,1,0,1,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class yagLexer extends antlr4.Lexer {

    static grammarFileName = "yag.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'~'", "'<<'", "'>>'", "'for'", "'do'", "'while'", 
                         "'break'", "'continue'", "'switch'", "'case'", 
                         "'default'", "'const'", "'if'", "'else'", "'return'", 
                         "'int'", "'bool'", "'void'", "'chan'", "'broadcast'", 
                         "'struct'", "'typedef'", "'('", "')'", "'{'", "'}'", 
                         "'['", "']'", "';'", "','", "'.'", "'!'", "'-'", 
                         "'>'", "'<'", "'?'", "':'", "'=='", "'<='", "'>='", 
                         "'!='", "'++'", "'--'", "'+'", "'*'", "'/'", "'&'", 
                         "'|'", "'^'", "'%'", "'&&'", "'||'", "'='", "'+='", 
                         "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", 
                         "'%='", "'<<='", "'>>='" ];
	static symbolicNames = [ null, null, null, null, "FOR", "DO", "WHILE", 
                          "BREAK", "CONTINUE", "SWITCH", "CASE", "DEFAULT", 
                          "CONST", "IF", "ELSE", "RETURN", "INT", "BOOL", 
                          "VOID", "CHAN", "BCAST", "STRUCT", "TYPEDEF", 
                          "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", 
                          "RBRACK", "SEMI", "COMMA", "DOT", "BANG", "SUB", 
                          "GT", "LT", "QUESTION", "COLON", "EQUAL", "LE", 
                          "GE", "NOTEQUAL", "INC", "DEC", "ADD", "MUL", 
                          "DIV", "BITAND", "BITOR", "CARET", "MOD", "AND", 
                          "OR", "ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", 
                          "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
                          "MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", 
                          "INTEGER", "BOOLEAN", "ID", "WHITESPACE", "BLOCK_COMMENT", 
                          "LINE_COMMENT" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "FOR", "DO", "WHILE", "BREAK", 
                      "CONTINUE", "SWITCH", "CASE", "DEFAULT", "CONST", 
                      "IF", "ELSE", "RETURN", "INT", "BOOL", "VOID", "CHAN", 
                      "BCAST", "STRUCT", "TYPEDEF", "LPAREN", "RPAREN", 
                      "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", 
                      "DOT", "BANG", "SUB", "GT", "LT", "QUESTION", "COLON", 
                      "EQUAL", "LE", "GE", "NOTEQUAL", "INC", "DEC", "ADD", 
                      "MUL", "DIV", "BITAND", "BITOR", "CARET", "MOD", "AND", 
                      "OR", "ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", 
                      "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
                      "MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", "ARRAY_DIM", 
                      "INTEGER", "BOOLEAN", "ID", "WHITESPACE", "BLOCK_COMMENT", 
                      "LINE_COMMENT" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

yagLexer.EOF = antlr4.Token.EOF;
yagLexer.T__0 = 1;
yagLexer.T__1 = 2;
yagLexer.T__2 = 3;
yagLexer.FOR = 4;
yagLexer.DO = 5;
yagLexer.WHILE = 6;
yagLexer.BREAK = 7;
yagLexer.CONTINUE = 8;
yagLexer.SWITCH = 9;
yagLexer.CASE = 10;
yagLexer.DEFAULT = 11;
yagLexer.CONST = 12;
yagLexer.IF = 13;
yagLexer.ELSE = 14;
yagLexer.RETURN = 15;
yagLexer.INT = 16;
yagLexer.BOOL = 17;
yagLexer.VOID = 18;
yagLexer.CHAN = 19;
yagLexer.BCAST = 20;
yagLexer.STRUCT = 21;
yagLexer.TYPEDEF = 22;
yagLexer.LPAREN = 23;
yagLexer.RPAREN = 24;
yagLexer.LBRACE = 25;
yagLexer.RBRACE = 26;
yagLexer.LBRACK = 27;
yagLexer.RBRACK = 28;
yagLexer.SEMI = 29;
yagLexer.COMMA = 30;
yagLexer.DOT = 31;
yagLexer.BANG = 32;
yagLexer.SUB = 33;
yagLexer.GT = 34;
yagLexer.LT = 35;
yagLexer.QUESTION = 36;
yagLexer.COLON = 37;
yagLexer.EQUAL = 38;
yagLexer.LE = 39;
yagLexer.GE = 40;
yagLexer.NOTEQUAL = 41;
yagLexer.INC = 42;
yagLexer.DEC = 43;
yagLexer.ADD = 44;
yagLexer.MUL = 45;
yagLexer.DIV = 46;
yagLexer.BITAND = 47;
yagLexer.BITOR = 48;
yagLexer.CARET = 49;
yagLexer.MOD = 50;
yagLexer.AND = 51;
yagLexer.OR = 52;
yagLexer.ASSIGN = 53;
yagLexer.ADD_ASSIGN = 54;
yagLexer.SUB_ASSIGN = 55;
yagLexer.MUL_ASSIGN = 56;
yagLexer.DIV_ASSIGN = 57;
yagLexer.AND_ASSIGN = 58;
yagLexer.OR_ASSIGN = 59;
yagLexer.XOR_ASSIGN = 60;
yagLexer.MOD_ASSIGN = 61;
yagLexer.LSHIFT_ASSIGN = 62;
yagLexer.RSHIFT_ASSIGN = 63;
yagLexer.INTEGER = 64;
yagLexer.BOOLEAN = 65;
yagLexer.ID = 66;
yagLexer.WHITESPACE = 67;
yagLexer.BLOCK_COMMENT = 68;
yagLexer.LINE_COMMENT = 69;



